/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bejeweled.blitz;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.List;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

/**
 *
 * @author Farhan
 */
public class GamePlayFrame extends javax.swing.JFrame {

    Board gemBoard;
    private int counter = 0;
    private int[][] coordinates = new int[2][2];
    private JButton[][] tiles;
    ArrayList<Gem> listOfGems;
    private Icon hexagon = new ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\hexagon.PNG");
    private Icon diamond = new ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\diamond.PNG");
    private Icon circle = new ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\circle.PNG");
    private Icon triangle = new ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\triangle.PNG");
    private Icon square = new ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\square.PNG");

    /**
     * Creates new form BoardFrame
     */
    public GamePlayFrame() {
//        initComponents();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1307, 700));
        setSize(new java.awt.Dimension(0, 0));

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\background images\\Computer.Desktop.Wallpapers.Collection1_001 (76).jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, java.awt.BorderLayout.CENTER);

        JPanel board = new JPanel();

        board.setLayout(new GridLayout(8, 8));
        ButtonHandler handler = new ButtonHandler();
        tiles = new JButton[8][8];
        gemBoard = new Board();
        listOfGems = gemBoard.createBoard();
        for (int x = 0; x < 8; x++) {

            for (int y = 0; y < 8; y++) {

                tiles[x][y] = new JButton();

                //tiles[x][y].setActionCommand(x + " " + y);
                //tiles[x][y].setIcon(diamond);
                if (listOfGems.get(8 * x + y).getValue() == 1) {
                    tiles[x][y].setIcon(circle);
                }
                if (listOfGems.get(8 * x + y).getValue() == 2) {
                    tiles[x][y].setIcon(triangle);
                }
                if (listOfGems.get(8 * x + y).getValue() == 3) {
                    tiles[x][y].setIcon(square);
                }
                if (listOfGems.get(8 * x + y).getValue() == 4) {
                    tiles[x][y].setIcon(diamond);
                }
                if (listOfGems.get(8 * x + y).getValue() == 5) {
                    tiles[x][y].setIcon(hexagon);
                }
                tiles[x][y].addActionListener(handler);
                tiles[x][y].setBackground(Color.black);
                board.add(tiles[x][y]);
            }
        }
        board.setBackground(Color.BLACK);
        board.setPreferredSize(new Dimension(650, 0));
        add(board, BorderLayout.EAST);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1307, 700));
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(null);

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\background images\\Computer.Desktop.Wallpapers.Collection1_001 (76).jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1290, 660);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePlayFrame().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    //coordinates[0][0] contains source i
    //coordinates[0][1] contains source j
    //coordinates[1][0] contains destination i
    //coordinates[1][1] contains destination j
    private boolean isValidMove() {
        if ((this.coordinates[0][0] - 1) >= 0) {
            if ((this.coordinates[0][0] - 1) == this.coordinates[1][0] && this.coordinates[0][1] == this.coordinates[1][1]) {
                return true;
            }
        }
        if ((this.coordinates[0][1] - 1) >= 0) {
            if (this.coordinates[0][0] == this.coordinates[1][0] && (this.coordinates[0][1] - 1) == this.coordinates[1][1]) {
                return true;
            }
        }
        if ((this.coordinates[0][1] + 1) < 8) {
            if (this.coordinates[0][0] == this.coordinates[1][0] && (this.coordinates[0][1] + 1) == this.coordinates[1][1]) {
                return true;
            }
        }
        if ((this.coordinates[0][0] + 1) < 8) {
            if ((this.coordinates[0][0] + 1) == this.coordinates[1][0] && this.coordinates[0][1] == this.coordinates[1][1]) {
                return true;
            }
        }
        return false;
    }

    private void processClick(int i, int j) {
        ++this.counter;
        if (this.counter == 1) {
            this.coordinates[0][0] = i;
            this.coordinates[0][1] = j;
        }
        if (this.counter == 2) {
            this.coordinates[1][0] = i;
            this.coordinates[1][1] = j;
            if (this.isValidMove()) {
                Icon temp = this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].getIcon();
                this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].setIcon(null);
                
                this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].setIcon(this.tiles[(this.coordinates[1][0])][(this.coordinates[1][1])].getIcon());
                
                this.tiles[(this.coordinates[1][0])][(this.coordinates[1][1])].setIcon(temp);
                this.gemBoard.swapGem(coordinates);
                int delay = 1000;//specify the delay for the timer
                Timer timer = new Timer(delay, e -> {
                    //The following code will be executed once the delay is reached
                    if (this.gemBoard.findOccurences()) {
                    ;
                } else {
                    final Icon temp2 = this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].getIcon();
                    this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].setIcon(null);
                    
                    this.tiles[(this.coordinates[0][0])][(this.coordinates[0][1])].setIcon(this.tiles[(this.coordinates[1][0])][(this.coordinates[1][1])].getIcon());
                    
                    this.tiles[(this.coordinates[1][0])][(this.coordinates[1][1])].setIcon(temp2);
                    this.gemBoard.swapGem(coordinates);
                }
                });
                timer.setRepeats(false);//make sure the timer only runs once
                timer.start();
                
            }
            this.counter = 0;
        }
    }

    private class ButtonHandler implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            LoginFrame.playSound("D:\\FAST\\Semester 5\\Object Oriented Analysis and Design\\Project\\Bonus Part\\sounds\\click.wav");
            Object source = ae.getSource();
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    if (source == tiles[i][j]) {
                        processClick(i, j);
                        return;
                    }
                }
            }
        }

    }

}
